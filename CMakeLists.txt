cmake_minimum_required(VERSION 3.1)

PROJECT(GB28181App)


set(CMAKE_VERBOSE_MAKEFILE ON)
add_definitions(-std=c++11 -DQINGDONG_CCTC -DUSE_IPV6)

IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE Release)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2  -Wall")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2  -Wall")
ENDIF()

MESSAGE("BUILD TYPE:" ${CMAKE_BUILD_TYPE})
MESSAGE("CMAKE_CXX_FLAGS:" ${CMAKE_CXX_FLAGS})
MESSAGE("CMAKE_C_FLAGS:" ${CMAKE_C_FLAGS})

#SET(CMAKE_C_COMPLITER "GCC")


INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/SipServer)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/resip/include)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/libcurl/include)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/lib/rapidjson)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/device)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/tools)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/asio/include/)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/deviceMng)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/mediaIn)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/rtp)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/rtp/lib/rtp)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/rtp/lib/mov)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/rtp/lib/mpeg)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/media/rtp/lib/flv)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Plugin)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Plugin/vsk/x86Nvr/include)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Plugin/vsk/x86Nvr)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/RegistrarServer)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/UserAgent)




if (USE_MYSQL)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../resip/contrib/MySQLConnectorC/include)
endif()
if (USE_SSL)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/../../resip/contrib/MySQLConnectorC/include)
endif()

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/device/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/tools/ SRC_LIST)

AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/deviceMng/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/media/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/media/mediaIn/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/media/rtp/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/Plugin/vsk/x86Nvr/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/Plugin/vsk/x86Nvr/include SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/RegistrarServer/ SRC_LIST)
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/UserAgent/ SRC_LIST)


link_directories(${PROJECT_SOURCE_DIR}/lib/resip/lib)
link_directories(${PROJECT_SOURCE_DIR}/lib/libcurl/lib)
link_directories(${PROJECT_SOURCE_DIR}/lib/media)


SET(LIBS
	-Wl,--start-group
	librepro.a 
	libdum.a 
	libresip.a 
	librutil.a
	libresipares.a
	libdb.a 
	libdb_cxx.a

	libcurl.a

	librtp.a
	libmpeg.a
	libmov.a
	libflv.a
	-Wl,--end-group
)
if (USE_MYSQL)
SET(LIBS ${LIBS}
	libmysqlclient.a
)
endif()

if (USE_SSL)
SET(LIBS ${LIBS}
	libcrypto.a
	libssl.a
)
endif()

#link_libraries(z)
#link_libraries(ssl)
link_libraries(pthread)
link_libraries(rt)
#link_libraries(m)
link_libraries(dl)
link_libraries(stdc++)


add_executable(GB28181App ${SRC_LIST})
TARGET_LINK_LIBRARIES(GB28181App ${LIBS})
